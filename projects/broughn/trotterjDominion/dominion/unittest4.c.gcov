        -:    0:Source:unittest4.c
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTFUNC "isGameOver"
        -:   11:
function main called 1 returned 100% blocks executed 79%
        1:   12:int main() {
        1:   13:	int seed = 1000;
        -:   14:	struct gameState G, testG;
        1:   15:	int numPlayer = 2;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   17:		 remodel, smithy, village, baron, great_hall};
        1:   18:	int result = 0;
        -:   19:
        1:   20:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   21:
        1:   22:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   23:
        1:   24:	result = isGameOver(&testG);
call    0 returned 100%
        -:   25:
        1:   26:	assert(result == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   27:
        1:   28:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   29:	testG.supplyCount[province] = 0;
        -:   30:
        1:   31:	result = isGameOver(&testG);
call    0 returned 100%
        -:   32:
        1:   33:	assert(result == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   34:
        1:   35:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   36:	testG.supplyCount[copper] = 0;
        1:   37:	testG.supplyCount[silver] = 0;
        1:   38:	testG.supplyCount[gold] = 0;
        -:   39:
        1:   40:	result = isGameOver(&testG);
call    0 returned 100%
        -:   41:
        1:   42:	assert(result == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   43:
        1:   44:	printf("----- Testing function: %s -----\n", TESTFUNC);
call    0 returned 100%
        1:   45:	printf(">>> All tests passed <<<\n\n");
call    0 returned 100%
        -:   46:
        1:   47:	return 0;
        -:   48:}
