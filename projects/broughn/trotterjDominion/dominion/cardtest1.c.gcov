        -:    0:Source:cardtest1.c
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTCARD "smithy"
        -:   11:
function main called 1 returned 100% blocks executed 87%
        1:   12:int main() {
        1:   13:	int seed = 1000;
        -:   14:	struct gameState G, testG;
        1:   15:	int numPlayer = 2;
        1:   16:	int curPlayer = 0;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:		 remodel, smithy, village, baron, great_hall};
        1:   19:	int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   20:	int handPos = 0;
        1:   21:	int bonus = 0;
        -:   22:	
        -:   23:
        1:   24:	int newCards = 3;
        1:   25:	int discarded = 1;
        -:   26:
        -:   27:
        1:   28:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   29:
        1:   30:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   31:
        -:   32:
        1:   33:	cardEffect(smithy, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:   34:
        -:   35:	
        1:   36:	printf("----- Testing Card: %s -----\n", TESTCARD);
call    0 returned 100%
        1:   37:	printf("Test 1: Current player receives 3 cards\n");
call    0 returned 100%
        1:   38:	printf("Hand count = %d, expected = %d\n", testG.handCount[curPlayer], G.handCount[curPlayer]+newCards-discarded);
call    0 returned 100%
        1:   39:	printf("Test 2: Cards were drawn from player's own deck\n");
call    0 returned 100%
        1:   40:	printf("Deck count = %d, expected = %d\n", testG.deckCount[curPlayer], G.handCount[curPlayer]-newCards);
call    0 returned 100%
        -:   41:
        -:   42:	//assert(testG.handCount[curPlayer] == G.handCount[curPlayer]+newCards-discarded);
        1:   43:	assert(testG.deckCount[curPlayer] == G.handCount[curPlayer]-newCards);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   44:
        1:   45:	printf("Test 3: No state change occurs for other player\n");
call    0 returned 100%
        1:   46:	printf("Deck count = %d, expected = %d\n", testG.deckCount[curPlayer+1], G.deckCount[curPlayer+1]);
call    0 returned 100%
        -:   47:
        1:   48:	assert(testG.deckCount[curPlayer+1] == G.deckCount[curPlayer+1]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   49:
        1:   50:	printf("Test 4: No state change to victory card piles and kingdom card piles\n");
call    0 returned 100%
        1:   51:	printf("Player 1 score: %d, expected: %d. Player 2 score: %d, expected %d\n", scoreFor(curPlayer, &testG), scoreFor(curPlayer, &G),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   52:		scoreFor(curPlayer+1, &testG), scoreFor(curPlayer+1, &G));
        -:   53:
        1:   54:	assert(scoreFor(curPlayer, &testG) == scoreFor(curPlayer, &G));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        1:   55:	assert(scoreFor(curPlayer+1, &testG) == scoreFor(curPlayer+1, &G));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -:   56:
        1:   57:	printf(">>> All tests passed <<<\n\n");
call    0 returned 100%
        -:   58:
        1:   59:	return 0;
        -:   60:}
