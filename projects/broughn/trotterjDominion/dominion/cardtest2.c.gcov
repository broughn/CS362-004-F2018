        -:    0:Source:cardtest2.c
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTCARD "adventurer"
        -:   11:
function main called 1 returned 100% blocks executed 65%
        1:   12:int main() {
        1:   13:	int seed = 1000;
        -:   14:	struct gameState G, testG;
        1:   15:	int numPlayer = 2;
        1:   16:	int curPlayer = 0;
        1:   17:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:		 remodel, smithy, village, baron, great_hall};
        1:   19:	int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   20:	int handPos = 0;
        1:   21:	int bonus = 0;
        1:   22:	int i = 0;
        -:   23:
        1:   24:	int newCards = 2;
        1:   25:	int discarded = 1;
        -:   26:
        -:   27:
        1:   28:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   29:
        1:   30:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   31:
        -:   32:
        1:   33:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
call    0 returned 100%
        -:   34:
        -:   35:	
        1:   36:	printf("----- Testing Card: %s -----\n", TESTCARD);
call    0 returned 100%
        1:   37:	printf("Test 1: Current player receives 2 treasure cards\n");
call    0 returned 100%
        1:   38:	printf("Hand count = %d, expected = %d\n", testG.handCount[curPlayer], G.handCount[curPlayer]+newCards);
call    0 returned 100%
        1:   39:	printf("Test 2: Drawn card #1 is a treasure card\n");
call    0 returned 100%
        1:   40:	printf("Drawn card = %d, expected = 4,5,6\n", testG.hand[curPlayer][G.handCount[curPlayer]]);
call    0 returned 100%
        1:   41:	printf("Test 3: Drawn card #2 is a treasure card\n");
call    0 returned 100%
        1:   42:	printf("Drawn card = %d, expected = 4,5,6\n", testG.hand[curPlayer][G.handCount[curPlayer]+1]);
call    0 returned 100%
        -:   43:
        -:   44:	//assert(testG.handCount[curPlayer] == G.handCount[curPlayer]+newCards);
        1:   45:	assert(testG.hand[curPlayer][G.handCount[curPlayer]] == 4 || testG.hand[curPlayer][G.handCount[curPlayer]] == 5 ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   46:		testG.hand[curPlayer][G.handCount[curPlayer]] == 6);
        1:   47:	assert(testG.hand[curPlayer][G.handCount[curPlayer]+1] == 4 || testG.hand[curPlayer][G.handCount[curPlayer]+1] == 5 ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   48:		testG.hand[curPlayer][G.handCount[curPlayer]+1] == 6);
        -:   49:
        1:   50:	printf("Test 4: Discard pile increased\n");
call    0 returned 100%
        1:   51:	printf("Discard pile = %d >= original discard = %d\n", testG.discardCount[curPlayer], G.discardCount[curPlayer]);
call    0 returned 100%
        -:   52:
        1:   53:	assert(testG.discardCount[curPlayer] >= G.discardCount[curPlayer]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   54:
        1:   55:	printf("Test 5: No treasure cards are discarded\n");
call    0 returned 100%
        1:   56:	printf("Discarded cards: ");
call    0 returned 100%
        1:   57:	for (i = 0; i < testG.discardCount[curPlayer]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   58:		printf("%d, ", testG.discard[curPlayer][i]);
call    0 never executed
        -:   59:	}
        1:   60:	printf("expected any number not 4,5,6\n");
call    0 returned 100%
        -:   61:
        1:   62:	for (i = 0; i < testG.discardCount[curPlayer]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   63:		assert(testG.discard[curPlayer][i] != 4 || testG.discard[curPlayer][i] != 5 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   64:			testG.discard[curPlayer][i] != 6);
        -:   65:	}
        -:   66:
        1:   67:	printf("Other player's hand and discard remain the same\n");
call    0 returned 100%
        1:   68:	printf("Player 2 hand = %d, expected %d\n", testG.handCount[curPlayer+1], G.handCount[curPlayer+1]);
call    0 returned 100%
        1:   69:	printf("Player 2 discard = %d, expected %d\n", testG.discardCount[curPlayer+1], G.discardCount[curPlayer+1]);
call    0 returned 100%
        -:   70:
        -:   71:	//assert(testG.handCount[curPlayer+1] == G.handCount[curPlayer+1]);
        1:   72:	assert(testG.discardCount[curPlayer+1] == G.discardCount[curPlayer+1]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   73:
        1:   74:	printf(">>> All tests passed <<<\n\n");
call    0 returned 100%
        -:   75:
        1:   76:	return 0;
        -:   77:}
