        -:    0:Source:unittest1.c
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTFUNC "buyCard"
        -:   11:
function main called 1 returned 100% blocks executed 76%
        1:   12:int main() {
        1:   13:	int seed = 1000;
        -:   14:	struct gameState G, testG;
        1:   15:	int numPlayer = 2;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   17:		 remodel, smithy, village, baron, great_hall};
        1:   18:	int result = 0;
        -:   19:
        1:   20:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        1:   21:	G.coins = 50;
        -:   22:
        1:   23:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   24:
        1:   25:	testG.numBuys = 0;
        -:   26:
        1:   27:	result = buyCard(copper, &testG);
call    0 returned 100%
        -:   28:
        1:   29:	assert(result == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   30:
        1:   31:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   32:
        1:   33:	testG.supplyCount[copper] = 0;
        -:   34:
        1:   35:	result = buyCard(copper, &testG);
call    0 returned 100%
        -:   36:
        1:   37:	assert(result == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   38:
        1:   39:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   40:	testG.coins = 0;
        -:   41:
        1:   42:	result = buyCard(province, &testG);
call    0 returned 100%
        -:   43:
        1:   44:	assert(result == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   45:
        1:   46:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:
        1:   48:	result = buyCard(copper, &testG);
call    0 returned 100%
        -:   49:
        1:   50:	assert(result == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   51:
        1:   52:	printf("----- Testing function: %s -----\n", TESTFUNC);
call    0 returned 100%
        1:   53:	printf(">>> All tests passed <<<\n\n");
call    0 returned 100%
        -:   54:
        1:   55:	return 0;
        -:   56:
        -:   57:}
        -:   58:
        -:   59:
        -:   60:
