        -:    0:Source:unittest2.c
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10:#define TESTFUNC "fullDeckCount"
        -:   11:
function main called 1 returned 100% blocks executed 75%
        1:   12:int main() {
        1:   13:	int seed = 1000;
        -:   14:	struct gameState G, testG;
        1:   15:	int numPlayer = 2;
        1:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   17:		 remodel, smithy, village, baron, great_hall};
        1:   18:	int result = 0;
        -:   19:
        1:   20:	initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   21:
        1:   22:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   23:
        1:   24:	testG.hand[0][0] = gold;
        -:   25:
        1:   26:	result = fullDeckCount(0, gold, &testG);
call    0 returned 100%
        -:   27:
        1:   28:	assert(result == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   29:
        1:   30:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   31:
        1:   32:	testG.deck[0][0] = gold;
        -:   33:
        1:   34:	result = fullDeckCount(0, gold, &testG);
call    0 returned 100%
        -:   35:
        1:   36:	assert(result == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   37:
        1:   38:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   39:	
        1:   40:	testG.discard[0][0] = gold;
        1:   41:	testG.discardCount[0] = 1;
        -:   42:
        1:   43:	result = fullDeckCount(0, gold, &testG);
call    0 returned 100%
        -:   44:
        1:   45:	assert(result == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   46:
        1:   47:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   48:
        1:   49:	result = fullDeckCount(0, gold, &testG);
call    0 returned 100%
        -:   50:
        1:   51:	assert(result == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   52:
        1:   53:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   54:	testG.hand[0][0] = gold;
        1:   55:	testG.deck[0][0] = gold;
        1:   56:	testG.discard[0][0] = gold;
        1:   57:	testG.discardCount[0] = 1;
        -:   58:
        1:   59:	result = fullDeckCount(0, gold, &testG);
call    0 returned 100%
        -:   60:
        1:   61:	assert(result == 3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   62:
        1:   63:	printf("----- Testing function: %s -----\n", TESTFUNC);
call    0 returned 100%
        1:   64:	printf(">>> All tests passed <<<\n\n");
call    0 returned 100%
        -:   65:
        1:   66:	return 0;
        -:   67:
        -:   68:}
